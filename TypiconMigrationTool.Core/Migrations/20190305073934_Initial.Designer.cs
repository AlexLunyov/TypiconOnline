// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TypiconMigrationTool.Core;

namespace TypiconMigrationTool.Core.Migrations
{
    [DbContext(typeof(Db))]
    [Migration("20190305073934_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("TypiconOnline.Domain.Books.Easter.EasterItem", b =>
                {
                    b.Property<DateTime>("Date");

                    b.HasKey("Date");

                    b.ToTable("EasterItem");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Books.Katavasia.Katavasia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Definition");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Katavasia");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Books.Oktoikh.OktoikhDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DayOfWeek");

                    b.Property<string>("Definition");

                    b.Property<int>("Ihos");

                    b.HasKey("Id");

                    b.ToTable("OktoikhDay");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Books.Psalter.Psalm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Definition");

                    b.Property<int>("Number");

                    b.HasKey("Id");

                    b.ToTable("Psalm");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Books.TheotokionApp.TheotokionApp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DayOfWeek");

                    b.Property<string>("Definition");

                    b.Property<int>("Ihos");

                    b.Property<int>("Place");

                    b.HasKey("Id");

                    b.ToTable("TheotokionApp");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Books.WeekDayApp.WeekDayApp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DayOfWeek");

                    b.Property<string>("Definition");

                    b.HasKey("Id");

                    b.ToTable("WeekDayApp");
                });

            modelBuilder.Entity("TypiconOnline.Domain.DayRuleWorship", b =>
                {
                    b.Property<int>("DayRuleId");

                    b.Property<int>("DayWorshipId");

                    b.HasKey("DayRuleId", "DayWorshipId");

                    b.HasIndex("DayWorshipId");

                    b.ToTable("DayRuleWorship");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Days.Day", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Day");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Day");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Days.DayWorship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Definition");

                    b.Property<bool>("IsCelebrating");

                    b.Property<int?>("ParentId")
                        .IsRequired();

                    b.Property<bool>("UseFullName");

                    b.Property<int>("WorshipNameId");

                    b.Property<int>("WorshipShortNameId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("WorshipNameId");

                    b.HasIndex("WorshipShortNameId");

                    b.ToTable("DayWorship");
                });

            modelBuilder.Entity("TypiconOnline.Domain.ItemTypes.ItemDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Expression");

                    b.HasKey("Id");

                    b.ToTable("ItemDate");
                });

            modelBuilder.Entity("TypiconOnline.Domain.ItemTypes.ItemText", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ItemText");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ItemText");
                });

            modelBuilder.Entity("TypiconOnline.Domain.ItemTypes.ItemTextUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ItemTextId");

                    b.Property<string>("Language");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("ItemTextId");

                    b.ToTable("ItemTextUnit");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.CommonRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("RuleDefinition");

                    b.Property<int>("TypiconEntityId");

                    b.HasKey("Id");

                    b.HasIndex("TypiconEntityId");

                    b.ToTable("CommonRule");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.DayRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<bool>("IsAddition");

                    b.Property<string>("RuleDefinition");

                    b.Property<int>("TemplateId");

                    b.Property<int>("TypiconEntityId");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("DayRule");

                    b.HasDiscriminator<string>("Discriminator").HasValue("DayRule");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Modifications.DayWorshipsFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ExcludedItem");

                    b.Property<int?>("IncludedItem");

                    b.Property<bool?>("IsCelebrating");

                    b.HasKey("Id");

                    b.ToTable("DayWorshipsFilter");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Modifications.ModifiedRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<int>("DayRuleId");

                    b.Property<int?>("FilterId");

                    b.Property<bool>("IsAddition");

                    b.Property<bool>("IsLastName");

                    b.Property<int>("ModifiedYearId");

                    b.Property<int>("Priority");

                    b.Property<int?>("ShortNameId");

                    b.Property<int?>("SignNumber");

                    b.Property<bool>("UseFullName");

                    b.HasKey("Id");

                    b.HasIndex("DayRuleId");

                    b.HasIndex("FilterId");

                    b.HasIndex("ModifiedYearId");

                    b.HasIndex("ShortNameId");

                    b.ToTable("ModifiedRule");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Modifications.ModifiedYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("TypiconEntityId");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("TypiconEntityId");

                    b.ToTable("ModifiedYear");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Psalter.Kathisma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Number");

                    b.Property<int?>("NumberNameId");

                    b.Property<int?>("TypiconEntityId");

                    b.HasKey("Id");

                    b.HasIndex("NumberNameId");

                    b.HasIndex("TypiconEntityId");

                    b.ToTable("Kathisma");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Psalter.PsalmLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("EndStihos");

                    b.Property<int?>("PsalmId");

                    b.Property<int?>("SlavaElementId");

                    b.Property<int?>("StartStihos");

                    b.HasKey("Id");

                    b.HasIndex("PsalmId");

                    b.HasIndex("SlavaElementId");

                    b.ToTable("PsalmLink");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Psalter.SlavaElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("KathismaId");

                    b.HasKey("Id");

                    b.HasIndex("KathismaId");

                    b.ToTable("SlavaElement");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Sign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsAddition");

                    b.Property<bool>("IsTemplate");

                    b.Property<int?>("Number");

                    b.Property<int>("Priority");

                    b.Property<string>("RuleDefinition");

                    b.Property<int?>("SignNameId");

                    b.Property<int?>("TemplateId");

                    b.Property<int>("TypiconEntityId");

                    b.HasKey("Id");

                    b.HasIndex("SignNameId");

                    b.HasIndex("TemplateId");

                    b.HasIndex("TypiconEntityId");

                    b.ToTable("Sign");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.TypiconEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DefaultLanguage");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<int?>("TemplateId");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("TypiconEntity");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Days.MenologyDay", b =>
                {
                    b.HasBaseType("TypiconOnline.Domain.Days.Day");

                    b.Property<int?>("DateBId");

                    b.Property<int?>("DateId");

                    b.HasIndex("DateBId");

                    b.HasIndex("DateId");

                    b.ToTable("MenologyDay");

                    b.HasDiscriminator().HasValue("MenologyDay");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Days.TriodionDay", b =>
                {
                    b.HasBaseType("TypiconOnline.Domain.Days.Day");

                    b.Property<int>("DaysFromEaster");

                    b.ToTable("TriodionDays");

                    b.HasDiscriminator().HasValue("TriodionDay");
                });

            modelBuilder.Entity("TypiconOnline.Domain.ItemTypes.ItemTextStyled", b =>
                {
                    b.HasBaseType("TypiconOnline.Domain.ItemTypes.ItemText");

                    b.Property<bool>("IsBold");

                    b.Property<bool>("IsItalic");

                    b.Property<bool>("IsRed");

                    b.ToTable("ItemTextStyled");

                    b.HasDiscriminator().HasValue("ItemTextStyled");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.MenologyRule", b =>
                {
                    b.HasBaseType("TypiconOnline.Domain.Typicon.DayRule");

                    b.Property<int?>("DateBId");

                    b.Property<int?>("DateId");

                    b.HasIndex("DateBId");

                    b.HasIndex("DateId");

                    b.HasIndex("TypiconEntityId");

                    b.ToTable("MenologyRule");

                    b.HasDiscriminator().HasValue("MenologyRule");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.TriodionRule", b =>
                {
                    b.HasBaseType("TypiconOnline.Domain.Typicon.DayRule");

                    b.Property<int>("DaysFromEaster");

                    b.HasIndex("TypiconEntityId")
                        .HasName("IX_DayRule_TypiconEntityId1");

                    b.ToTable("TriodionRule");

                    b.HasDiscriminator().HasValue("TriodionRule");
                });

            modelBuilder.Entity("TypiconOnline.Domain.DayRuleWorship", b =>
                {
                    b.HasOne("TypiconOnline.Domain.Typicon.DayRule", "DayRule")
                        .WithMany("DayRuleWorships")
                        .HasForeignKey("DayRuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TypiconOnline.Domain.Days.DayWorship", "DayWorship")
                        .WithMany()
                        .HasForeignKey("DayWorshipId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TypiconOnline.Domain.Days.DayWorship", b =>
                {
                    b.HasOne("TypiconOnline.Domain.Days.Day", "Parent")
                        .WithMany("DayWorships")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TypiconOnline.Domain.ItemTypes.ItemTextStyled", "WorshipName")
                        .WithMany()
                        .HasForeignKey("WorshipNameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TypiconOnline.Domain.ItemTypes.ItemTextStyled", "WorshipShortName")
                        .WithMany()
                        .HasForeignKey("WorshipShortNameId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TypiconOnline.Domain.ItemTypes.ItemTextUnit", b =>
                {
                    b.HasOne("TypiconOnline.Domain.ItemTypes.ItemText")
                        .WithMany("Items")
                        .HasForeignKey("ItemTextId");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.CommonRule", b =>
                {
                    b.HasOne("TypiconOnline.Domain.Typicon.TypiconEntity", "TypiconEntity")
                        .WithMany("CommonRules")
                        .HasForeignKey("TypiconEntityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.DayRule", b =>
                {
                    b.HasOne("TypiconOnline.Domain.Typicon.Sign", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Modifications.ModifiedRule", b =>
                {
                    b.HasOne("TypiconOnline.Domain.Typicon.DayRule", "DayRule")
                        .WithMany()
                        .HasForeignKey("DayRuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TypiconOnline.Domain.Typicon.Modifications.DayWorshipsFilter", "Filter")
                        .WithMany()
                        .HasForeignKey("FilterId");

                    b.HasOne("TypiconOnline.Domain.Typicon.Modifications.ModifiedYear", "Parent")
                        .WithMany("ModifiedRules")
                        .HasForeignKey("ModifiedYearId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TypiconOnline.Domain.ItemTypes.ItemTextStyled", "ShortName")
                        .WithMany()
                        .HasForeignKey("ShortNameId");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Modifications.ModifiedYear", b =>
                {
                    b.HasOne("TypiconOnline.Domain.Typicon.TypiconEntity", "TypiconEntity")
                        .WithMany("ModifiedYears")
                        .HasForeignKey("TypiconEntityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Psalter.Kathisma", b =>
                {
                    b.HasOne("TypiconOnline.Domain.ItemTypes.ItemText", "NumberName")
                        .WithMany()
                        .HasForeignKey("NumberNameId");

                    b.HasOne("TypiconOnline.Domain.Typicon.TypiconEntity", "TypiconEntity")
                        .WithMany("Kathismas")
                        .HasForeignKey("TypiconEntityId");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Psalter.PsalmLink", b =>
                {
                    b.HasOne("TypiconOnline.Domain.Books.Psalter.Psalm", "Psalm")
                        .WithMany()
                        .HasForeignKey("PsalmId");

                    b.HasOne("TypiconOnline.Domain.Typicon.Psalter.SlavaElement")
                        .WithMany("PsalmLinks")
                        .HasForeignKey("SlavaElementId");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Psalter.SlavaElement", b =>
                {
                    b.HasOne("TypiconOnline.Domain.Typicon.Psalter.Kathisma")
                        .WithMany("SlavaElements")
                        .HasForeignKey("KathismaId");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Sign", b =>
                {
                    b.HasOne("TypiconOnline.Domain.ItemTypes.ItemText", "SignName")
                        .WithMany()
                        .HasForeignKey("SignNameId");

                    b.HasOne("TypiconOnline.Domain.Typicon.Sign", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TypiconOnline.Domain.Typicon.TypiconEntity", "TypiconEntity")
                        .WithMany("Signs")
                        .HasForeignKey("TypiconEntityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.TypiconEntity", b =>
                {
                    b.HasOne("TypiconOnline.Domain.Typicon.TypiconEntity", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Days.MenologyDay", b =>
                {
                    b.HasOne("TypiconOnline.Domain.ItemTypes.ItemDate", "DateB")
                        .WithMany()
                        .HasForeignKey("DateBId");

                    b.HasOne("TypiconOnline.Domain.ItemTypes.ItemDate", "Date")
                        .WithMany()
                        .HasForeignKey("DateId");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.MenologyRule", b =>
                {
                    b.HasOne("TypiconOnline.Domain.ItemTypes.ItemDate", "DateB")
                        .WithMany()
                        .HasForeignKey("DateBId");

                    b.HasOne("TypiconOnline.Domain.ItemTypes.ItemDate", "Date")
                        .WithMany()
                        .HasForeignKey("DateId");

                    b.HasOne("TypiconOnline.Domain.Typicon.TypiconEntity", "TypiconEntity")
                        .WithMany("MenologyRules")
                        .HasForeignKey("TypiconEntityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.TriodionRule", b =>
                {
                    b.HasOne("TypiconOnline.Domain.Typicon.TypiconEntity", "TypiconEntity")
                        .WithMany("TriodionRules")
                        .HasForeignKey("TypiconEntityId")
                        .HasConstraintName("FK_DayRule_TypiconEntity_TypiconEntityId1")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
