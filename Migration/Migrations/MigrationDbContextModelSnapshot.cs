// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TypiconMigrationTool;

namespace MigrationTool.Migrations
{
    [DbContext(typeof(MigrationDbContext))]
    partial class MigrationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT")
                        .HasMaxLength(127);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT")
                        .HasMaxLength(127);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT")
                        .HasMaxLength(127);

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(127);

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Books.Easter.EasterItem", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.HasKey("Date");

                    b.ToTable("EasterItem");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Books.Katavasia.Katavasia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Definition")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Katavasia");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Books.Oktoikh.OktoikhDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Definition")
                        .HasColumnType("TEXT");

                    b.Property<int>("Ihos")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("OktoikhDay");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Books.Psalter.Psalm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Definition")
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Psalm");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Books.TheotokionApp.TheotokionApp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Definition")
                        .HasColumnType("TEXT");

                    b.Property<int>("Ihos")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Place")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("TheotokionApp");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Books.WeekDayApp.WeekDayApp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Definition")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("WeekDayApp");
                });

            modelBuilder.Entity("TypiconOnline.Domain.DayRuleWorship", b =>
                {
                    b.Property<int>("DayRuleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DayWorshipId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.HasKey("DayRuleId", "DayWorshipId");

                    b.HasIndex("DayWorshipId");

                    b.ToTable("DayRuleWorship");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Days.Day", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Day");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Day");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Days.DayWorship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Definition")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCelebrating")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("UseFullName")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("DayWorship");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Identity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(127);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(127);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasMaxLength(127);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(127);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT")
                        .HasMaxLength(127);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(127);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(127);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Identity.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Identity.UserTypicon", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TypiconId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "TypiconId");

                    b.HasIndex("TypiconId");

                    b.ToTable("UserTypicon");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.CommonRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("RuleDefinition")
                        .HasColumnType("TEXT");

                    b.Property<int>("TypiconVersionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TypiconVersionId");

                    b.ToTable("CommonRule");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.DayRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAddition")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModRuleDefinition")
                        .HasColumnType("TEXT");

                    b.Property<string>("RuleDefinition")
                        .HasColumnType("TEXT");

                    b.Property<int>("TemplateId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TypiconVersionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("DayRule");

                    b.HasDiscriminator<string>("Discriminator").HasValue("DayRule");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.ExplicitAddRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("RuleDefinition")
                        .HasColumnType("TEXT");

                    b.Property<int>("TypiconVersionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TypiconVersionId");

                    b.ToTable("ExplicitAddRule");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Modifications.DayWorshipsFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ExcludedItem")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("IncludedItem")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsCelebrating")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("DayWorshipsFilter");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Modifications.ModifiedRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("DayRuleId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FilterId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAddition")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLastName")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ModifiedYearId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SignNumber")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("UseFullName")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DayRuleId");

                    b.HasIndex("FilterId");

                    b.HasIndex("ModifiedYearId");

                    b.ToTable("ModifiedRule");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Modifications.ModifiedYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCalculated")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TypiconVersionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TypiconVersionId");

                    b.ToTable("ModifiedYear");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Output.OutputDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomSignNumber")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("PredefinedSignId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TypiconId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PredefinedSignId");

                    b.HasIndex("TypiconId");

                    b.ToTable("OutputDay");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Output.OutputDayWorship", b =>
                {
                    b.Property<int>("OutputDayId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DayWorshipId")
                        .HasColumnType("INTEGER");

                    b.HasKey("OutputDayId", "DayWorshipId");

                    b.HasIndex("DayWorshipId");

                    b.ToTable("OutputDayWorship");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Output.OutputWorship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Definition")
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OutputDayId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Time")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OutputDayId");

                    b.ToTable("OutputWorship");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Print.PrintDayTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("PrintFile")
                        .HasColumnType("BLOB");

                    b.Property<string>("PrintFileName")
                        .HasColumnType("TEXT");

                    b.Property<char?>("SignSymbol")
                        .HasColumnType("TEXT");

                    b.Property<int>("TypiconVersionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TypiconVersionId");

                    b.ToTable("PrintDayTemplate");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Print.PrintTemplateModRuleLink<TypiconOnline.Domain.Typicon.MenologyRule>", b =>
                {
                    b.Property<int>("TemplateId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TemplateId", "EntityId");

                    b.HasIndex("EntityId");

                    b.ToTable("MenologyRulePrintLinks");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Print.PrintTemplateModRuleLink<TypiconOnline.Domain.Typicon.Sign>", b =>
                {
                    b.Property<int>("TemplateId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TemplateId", "EntityId");

                    b.HasIndex("EntityId");

                    b.ToTable("SignPrintLinks");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Print.PrintTemplateModRuleLink<TypiconOnline.Domain.Typicon.TriodionRule>", b =>
                {
                    b.Property<int>("TemplateId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TemplateId", "EntityId");

                    b.HasIndex("EntityId");

                    b.ToTable("TriodionRulePrintLinks");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Print.PrintWeekTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DaysPerPage")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("PrintFile")
                        .HasColumnType("BLOB");

                    b.Property<string>("PrintFileName")
                        .HasColumnType("TEXT");

                    b.Property<int>("TypiconVersionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TypiconVersionId")
                        .IsUnique();

                    b.ToTable("PrintWeekTemplate");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Psalter.Kathisma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TypiconVersionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TypiconVersionId");

                    b.ToTable("Kathisma");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Psalter.PsalmLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EndStihos")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PsalmId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SlavaElementId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StartStihos")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PsalmId");

                    b.HasIndex("SlavaElementId");

                    b.ToTable("PsalmLink");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Psalter.SlavaElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("KathismaId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("KathismaId");

                    b.ToTable("SlavaElement");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Sign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAddition")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModRuleDefinition")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PrintTemplateId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RuleDefinition")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TemplateId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TypiconVersionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PrintTemplateId");

                    b.HasIndex("TemplateId");

                    b.HasIndex("TypiconVersionId");

                    b.ToTable("Sign");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.TypiconEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DefaultLanguage")
                        .HasColumnType("TEXT");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TemplateId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TemplateId");

                    b.ToTable("TypiconEntity");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.TypiconVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("BDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsModified")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PrevVersionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TypiconId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ValidationStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VersionNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PrevVersionId");

                    b.HasIndex("TypiconId");

                    b.ToTable("TypiconVersion");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.TypiconVersionError", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConstraintDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConstraintPath")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityName")
                        .HasColumnType("TEXT");

                    b.Property<int>("TypiconVersionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TypiconVersionId");

                    b.ToTable("TypiconVersionError");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Variable.TypiconVariable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TypiconVersionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TypiconVersionId");

                    b.ToTable("TypiconVariable");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Variable.VariableModRuleLink<TypiconOnline.Domain.Typicon.MenologyRule>", b =>
                {
                    b.Property<int>("VariableId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DefinitionType")
                        .HasColumnType("INTEGER");

                    b.HasKey("VariableId", "EntityId", "DefinitionType");

                    b.HasIndex("EntityId");

                    b.ToTable("MenologyRuleVariables");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Variable.VariableModRuleLink<TypiconOnline.Domain.Typicon.Sign>", b =>
                {
                    b.Property<int>("VariableId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DefinitionType")
                        .HasColumnType("INTEGER");

                    b.HasKey("VariableId", "EntityId", "DefinitionType");

                    b.HasIndex("EntityId");

                    b.ToTable("SignVariables");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Variable.VariableModRuleLink<TypiconOnline.Domain.Typicon.TriodionRule>", b =>
                {
                    b.Property<int>("VariableId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DefinitionType")
                        .HasColumnType("INTEGER");

                    b.HasKey("VariableId", "EntityId", "DefinitionType");

                    b.HasIndex("EntityId");

                    b.ToTable("TriodionRuleVariables");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Variable.VariableRuleLink<TypiconOnline.Domain.Typicon.CommonRule>", b =>
                {
                    b.Property<int>("VariableId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.HasKey("VariableId", "EntityId");

                    b.HasIndex("EntityId");

                    b.ToTable("CommonRuleVariables");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Variable.VariableRuleLink<TypiconOnline.Domain.Typicon.ExplicitAddRule>", b =>
                {
                    b.Property<int>("VariableId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.HasKey("VariableId", "EntityId");

                    b.HasIndex("EntityId");

                    b.ToTable("ExplicitAddRuleVariables");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Days.MenologyDay", b =>
                {
                    b.HasBaseType("TypiconOnline.Domain.Days.Day");

                    b.HasDiscriminator().HasValue("MenologyDay");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Days.TriodionDay", b =>
                {
                    b.HasBaseType("TypiconOnline.Domain.Days.Day");

                    b.Property<int>("DaysFromEaster")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("TriodionDay");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.MenologyRule", b =>
                {
                    b.HasBaseType("TypiconOnline.Domain.Typicon.DayRule");

                    b.HasIndex("TypiconVersionId");

                    b.HasDiscriminator().HasValue("MenologyRule");
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.TriodionRule", b =>
                {
                    b.HasBaseType("TypiconOnline.Domain.Typicon.DayRule");

                    b.Property<int>("DaysFromEaster")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsTransparent")
                        .HasColumnType("INTEGER");

                    b.HasIndex("TypiconVersionId")
                        .HasName("IX_DayRule_TypiconVersionId1");

                    b.HasDiscriminator().HasValue("TriodionRule");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("TypiconOnline.Domain.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("TypiconOnline.Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("TypiconOnline.Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("TypiconOnline.Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TypiconOnline.Domain.DayRuleWorship", b =>
                {
                    b.HasOne("TypiconOnline.Domain.Typicon.DayRule", "DayRule")
                        .WithMany("DayRuleWorships")
                        .HasForeignKey("DayRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TypiconOnline.Domain.Days.DayWorship", "DayWorship")
                        .WithMany()
                        .HasForeignKey("DayWorshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TypiconOnline.Domain.Days.DayWorship", b =>
                {
                    b.HasOne("TypiconOnline.Domain.Days.Day", "Parent")
                        .WithMany("DayWorships")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("TypiconOnline.Domain.ItemTypes.ItemText", "WorshipShortName", b1 =>
                        {
                            b1.Property<int>("DayWorshipId")
                                .HasColumnType("INTEGER");

                            b1.HasKey("DayWorshipId");

                            b1.ToTable("DayWorshipShortName");

                            b1.WithOwner()
                                .HasForeignKey("DayWorshipId");

                            b1.OwnsMany("TypiconOnline.Domain.ItemTypes.ItemTextUnit", "Items", b2 =>
                                {
                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Language")
                                        .HasColumnType("TEXT");

                                    b2.Property<int>("NameId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Text")
                                        .HasColumnType("TEXT");

                                    b2.HasKey("Id");

                                    b2.HasIndex("NameId");

                                    b2.ToTable("DayWorshipShortNameItems");

                                    b2.WithOwner()
                                        .HasForeignKey("NameId");
                                });
                        });

                    b.OwnsOne("TypiconOnline.Domain.ItemTypes.ItemTextStyled", "WorshipName", b1 =>
                        {
                            b1.Property<int>("DayWorshipId")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("IsBold")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("IsItalic")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("IsRed")
                                .HasColumnType("INTEGER");

                            b1.HasKey("DayWorshipId");

                            b1.ToTable("DayWorship");

                            b1.WithOwner()
                                .HasForeignKey("DayWorshipId");

                            b1.OwnsMany("TypiconOnline.Domain.ItemTypes.ItemTextUnit", "Items", b2 =>
                                {
                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Language")
                                        .HasColumnType("TEXT");

                                    b2.Property<int>("NameId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Text")
                                        .HasColumnType("TEXT");

                                    b2.HasKey("Id");

                                    b2.HasIndex("NameId");

                                    b2.ToTable("DayWorshipNameItems");

                                    b2.WithOwner()
                                        .HasForeignKey("NameId");
                                });
                        });
                });

            modelBuilder.Entity("TypiconOnline.Domain.Identity.UserRole", b =>
                {
                    b.HasOne("TypiconOnline.Domain.Identity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TypiconOnline.Domain.Identity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TypiconOnline.Domain.Identity.UserTypicon", b =>
                {
                    b.HasOne("TypiconOnline.Domain.Typicon.TypiconEntity", "Typicon")
                        .WithMany("EditableUserTypicons")
                        .HasForeignKey("TypiconId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TypiconOnline.Domain.Identity.User", "User")
                        .WithMany("EditableUserTypicons")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.CommonRule", b =>
                {
                    b.HasOne("TypiconOnline.Domain.Typicon.TypiconVersion", "TypiconVersion")
                        .WithMany("CommonRules")
                        .HasForeignKey("TypiconVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.DayRule", b =>
                {
                    b.HasOne("TypiconOnline.Domain.Typicon.Sign", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.ExplicitAddRule", b =>
                {
                    b.HasOne("TypiconOnline.Domain.Typicon.TypiconVersion", "TypiconVersion")
                        .WithMany("ExplicitAddRules")
                        .HasForeignKey("TypiconVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Modifications.ModifiedRule", b =>
                {
                    b.HasOne("TypiconOnline.Domain.Typicon.DayRule", "DayRule")
                        .WithMany()
                        .HasForeignKey("DayRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TypiconOnline.Domain.Typicon.Modifications.DayWorshipsFilter", "Filter")
                        .WithMany()
                        .HasForeignKey("FilterId");

                    b.HasOne("TypiconOnline.Domain.Typicon.Modifications.ModifiedYear", "Parent")
                        .WithMany("ModifiedRules")
                        .HasForeignKey("ModifiedYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("TypiconOnline.Domain.ItemTypes.ItemTextStyled", "ShortName", b1 =>
                        {
                            b1.Property<int>("ModifiedRuleId")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("IsBold")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("IsItalic")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("IsRed")
                                .HasColumnType("INTEGER");

                            b1.HasKey("ModifiedRuleId");

                            b1.ToTable("ModifiedRuleShortName");

                            b1.WithOwner()
                                .HasForeignKey("ModifiedRuleId");

                            b1.OwnsMany("TypiconOnline.Domain.ItemTypes.ItemTextUnit", "Items", b2 =>
                                {
                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Language")
                                        .HasColumnType("TEXT");

                                    b2.Property<int>("NameId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Text")
                                        .HasColumnType("TEXT");

                                    b2.HasKey("Id");

                                    b2.HasIndex("NameId");

                                    b2.ToTable("ModifiedRuleShortNameItems");

                                    b2.WithOwner()
                                        .HasForeignKey("NameId");
                                });
                        });
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Modifications.ModifiedYear", b =>
                {
                    b.HasOne("TypiconOnline.Domain.Typicon.TypiconVersion", "TypiconVersion")
                        .WithMany("ModifiedYears")
                        .HasForeignKey("TypiconVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Output.OutputDay", b =>
                {
                    b.HasOne("TypiconOnline.Domain.Typicon.Sign", "PredefinedSign")
                        .WithMany()
                        .HasForeignKey("PredefinedSignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TypiconOnline.Domain.Typicon.TypiconEntity", "Typicon")
                        .WithMany()
                        .HasForeignKey("TypiconId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("TypiconOnline.Domain.ItemTypes.ItemText", "Name", b1 =>
                        {
                            b1.Property<int>("OutputDayId")
                                .HasColumnType("INTEGER");

                            b1.HasKey("OutputDayId");

                            b1.ToTable("OutputDay");

                            b1.WithOwner()
                                .HasForeignKey("OutputDayId");

                            b1.OwnsMany("TypiconOnline.Domain.ItemTypes.ItemTextUnit", "Items", b2 =>
                                {
                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Language")
                                        .HasColumnType("TEXT");

                                    b2.Property<int>("NameId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Text")
                                        .HasColumnType("TEXT");

                                    b2.HasKey("Id");

                                    b2.HasIndex("NameId");

                                    b2.ToTable("OutputDayNameItems");

                                    b2.WithOwner()
                                        .HasForeignKey("NameId");
                                });
                        });
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Output.OutputDayWorship", b =>
                {
                    b.HasOne("TypiconOnline.Domain.Days.DayWorship", "DayWorship")
                        .WithMany()
                        .HasForeignKey("DayWorshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TypiconOnline.Domain.Typicon.Output.OutputDay", "OutputDay")
                        .WithMany("OutputFormDayWorships")
                        .HasForeignKey("OutputDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Output.OutputWorship", b =>
                {
                    b.HasOne("TypiconOnline.Domain.Typicon.Output.OutputDay", "OutputDay")
                        .WithMany("Worships")
                        .HasForeignKey("OutputDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("TypiconOnline.Domain.ItemTypes.ItemText", "AdditionalName", b1 =>
                        {
                            b1.Property<int>("OutputWorshipId")
                                .HasColumnType("INTEGER");

                            b1.HasKey("OutputWorshipId");

                            b1.ToTable("OutputWorshipAddName");

                            b1.WithOwner()
                                .HasForeignKey("OutputWorshipId");

                            b1.OwnsMany("TypiconOnline.Domain.ItemTypes.ItemTextUnit", "Items", b2 =>
                                {
                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("INTEGER");

                                    b2.Property<int>("AddNameId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Language")
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("Text")
                                        .HasColumnType("TEXT");

                                    b2.HasKey("Id");

                                    b2.HasIndex("AddNameId");

                                    b2.ToTable("OutputWorshipAddNameItems");

                                    b2.WithOwner()
                                        .HasForeignKey("AddNameId");
                                });
                        });

                    b.OwnsOne("TypiconOnline.Domain.ItemTypes.ItemTextStyled", "Name", b1 =>
                        {
                            b1.Property<int>("OutputWorshipId")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("IsBold")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("IsItalic")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("IsRed")
                                .HasColumnType("INTEGER");

                            b1.HasKey("OutputWorshipId");

                            b1.ToTable("OutputWorship");

                            b1.WithOwner()
                                .HasForeignKey("OutputWorshipId");

                            b1.OwnsMany("TypiconOnline.Domain.ItemTypes.ItemTextUnit", "Items", b2 =>
                                {
                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Language")
                                        .HasColumnType("TEXT");

                                    b2.Property<int>("NameId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Text")
                                        .HasColumnType("TEXT");

                                    b2.HasKey("Id");

                                    b2.HasIndex("NameId");

                                    b2.ToTable("OutputWorshipNameItems");

                                    b2.WithOwner()
                                        .HasForeignKey("NameId");
                                });
                        });
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Print.PrintDayTemplate", b =>
                {
                    b.HasOne("TypiconOnline.Domain.Typicon.TypiconVersion", "TypiconVersion")
                        .WithMany("PrintDayTemplates")
                        .HasForeignKey("TypiconVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Print.PrintTemplateModRuleLink<TypiconOnline.Domain.Typicon.MenologyRule>", b =>
                {
                    b.HasOne("TypiconOnline.Domain.Typicon.MenologyRule", "Entity")
                        .WithMany("PrintTemplateLinks")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TypiconOnline.Domain.Typicon.Print.PrintDayTemplate", "Template")
                        .WithMany("MenologyPrintLinks")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Print.PrintTemplateModRuleLink<TypiconOnline.Domain.Typicon.Sign>", b =>
                {
                    b.HasOne("TypiconOnline.Domain.Typicon.Sign", "Entity")
                        .WithMany("PrintTemplateLinks")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TypiconOnline.Domain.Typicon.Print.PrintDayTemplate", "Template")
                        .WithMany("SignPrintLinks")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Print.PrintTemplateModRuleLink<TypiconOnline.Domain.Typicon.TriodionRule>", b =>
                {
                    b.HasOne("TypiconOnline.Domain.Typicon.TriodionRule", "Entity")
                        .WithMany("PrintTemplateLinks")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TypiconOnline.Domain.Typicon.Print.PrintDayTemplate", "Template")
                        .WithMany("TriodionPrintLinks")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Print.PrintWeekTemplate", b =>
                {
                    b.HasOne("TypiconOnline.Domain.Typicon.TypiconVersion", "TypiconVersion")
                        .WithOne("PrintWeekTemplate")
                        .HasForeignKey("TypiconOnline.Domain.Typicon.Print.PrintWeekTemplate", "TypiconVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Psalter.Kathisma", b =>
                {
                    b.HasOne("TypiconOnline.Domain.Typicon.TypiconVersion", "TypiconVersion")
                        .WithMany("Kathismas")
                        .HasForeignKey("TypiconVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("TypiconOnline.Domain.ItemTypes.ItemText", "NumberName", b1 =>
                        {
                            b1.Property<int>("KathismaId")
                                .HasColumnType("INTEGER");

                            b1.HasKey("KathismaId");

                            b1.ToTable("Kathisma");

                            b1.WithOwner()
                                .HasForeignKey("KathismaId");

                            b1.OwnsMany("TypiconOnline.Domain.ItemTypes.ItemTextUnit", "Items", b2 =>
                                {
                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Language")
                                        .HasColumnType("TEXT");

                                    b2.Property<int>("NameId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Text")
                                        .HasColumnType("TEXT");

                                    b2.HasKey("Id");

                                    b2.HasIndex("NameId");

                                    b2.ToTable("KathismaNumberNameItems");

                                    b2.WithOwner()
                                        .HasForeignKey("NameId");
                                });
                        });
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Psalter.PsalmLink", b =>
                {
                    b.HasOne("TypiconOnline.Domain.Books.Psalter.Psalm", "Psalm")
                        .WithMany()
                        .HasForeignKey("PsalmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TypiconOnline.Domain.Typicon.Psalter.SlavaElement", null)
                        .WithMany("PsalmLinks")
                        .HasForeignKey("SlavaElementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Psalter.SlavaElement", b =>
                {
                    b.HasOne("TypiconOnline.Domain.Typicon.Psalter.Kathisma", null)
                        .WithMany("SlavaElements")
                        .HasForeignKey("KathismaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Sign", b =>
                {
                    b.HasOne("TypiconOnline.Domain.Typicon.Print.PrintDayTemplate", "PrintTemplate")
                        .WithMany("SignLinks")
                        .HasForeignKey("PrintTemplateId");

                    b.HasOne("TypiconOnline.Domain.Typicon.Sign", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TypiconOnline.Domain.Typicon.TypiconVersion", "TypiconVersion")
                        .WithMany("Signs")
                        .HasForeignKey("TypiconVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("TypiconOnline.Domain.ItemTypes.ItemText", "SignName", b1 =>
                        {
                            b1.Property<int>("SignId")
                                .HasColumnType("INTEGER");

                            b1.HasKey("SignId");

                            b1.ToTable("Sign");

                            b1.WithOwner()
                                .HasForeignKey("SignId");

                            b1.OwnsMany("TypiconOnline.Domain.ItemTypes.ItemTextUnit", "Items", b2 =>
                                {
                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Language")
                                        .HasColumnType("TEXT");

                                    b2.Property<int>("NameId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Text")
                                        .HasColumnType("TEXT");

                                    b2.HasKey("Id");

                                    b2.HasIndex("NameId");

                                    b2.ToTable("SignNameItems");

                                    b2.WithOwner()
                                        .HasForeignKey("NameId");
                                });
                        });
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.TypiconEntity", b =>
                {
                    b.HasOne("TypiconOnline.Domain.Identity.User", "Owner")
                        .WithMany("OwnedTypicons")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TypiconOnline.Domain.Typicon.TypiconEntity", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.OwnsOne("TypiconOnline.Domain.ItemTypes.ItemText", "Name", b1 =>
                        {
                            b1.Property<int>("TypiconEntityId")
                                .HasColumnType("INTEGER");

                            b1.HasKey("TypiconEntityId");

                            b1.ToTable("TypiconEntity");

                            b1.WithOwner()
                                .HasForeignKey("TypiconEntityId");

                            b1.OwnsMany("TypiconOnline.Domain.ItemTypes.ItemTextUnit", "Items", b2 =>
                                {
                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Language")
                                        .HasColumnType("TEXT");

                                    b2.Property<int>("NameId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Text")
                                        .HasColumnType("TEXT");

                                    b2.HasKey("Id");

                                    b2.HasIndex("NameId");

                                    b2.ToTable("TypiconEntityNameItems");

                                    b2.WithOwner()
                                        .HasForeignKey("NameId");
                                });
                        });
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.TypiconVersion", b =>
                {
                    b.HasOne("TypiconOnline.Domain.Typicon.TypiconVersion", "PrevVersion")
                        .WithMany()
                        .HasForeignKey("PrevVersionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TypiconOnline.Domain.Typicon.TypiconEntity", "Typicon")
                        .WithMany("Versions")
                        .HasForeignKey("TypiconId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.TypiconVersionError", b =>
                {
                    b.HasOne("TypiconOnline.Domain.Typicon.TypiconVersion", "TypiconVersion")
                        .WithMany()
                        .HasForeignKey("TypiconVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Variable.TypiconVariable", b =>
                {
                    b.HasOne("TypiconOnline.Domain.Typicon.TypiconVersion", "TypiconVersion")
                        .WithMany("TypiconVariables")
                        .HasForeignKey("TypiconVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Variable.VariableModRuleLink<TypiconOnline.Domain.Typicon.MenologyRule>", b =>
                {
                    b.HasOne("TypiconOnline.Domain.Typicon.MenologyRule", "Entity")
                        .WithMany("VariableLinks")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TypiconOnline.Domain.Typicon.Variable.TypiconVariable", "Variable")
                        .WithMany("MenologyRuleLinks")
                        .HasForeignKey("VariableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Variable.VariableModRuleLink<TypiconOnline.Domain.Typicon.Sign>", b =>
                {
                    b.HasOne("TypiconOnline.Domain.Typicon.Sign", "Entity")
                        .WithMany("VariableLinks")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TypiconOnline.Domain.Typicon.Variable.TypiconVariable", "Variable")
                        .WithMany("SignLinks")
                        .HasForeignKey("VariableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Variable.VariableModRuleLink<TypiconOnline.Domain.Typicon.TriodionRule>", b =>
                {
                    b.HasOne("TypiconOnline.Domain.Typicon.TriodionRule", "Entity")
                        .WithMany("VariableLinks")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TypiconOnline.Domain.Typicon.Variable.TypiconVariable", "Variable")
                        .WithMany("TriodionRuleLinks")
                        .HasForeignKey("VariableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Variable.VariableRuleLink<TypiconOnline.Domain.Typicon.CommonRule>", b =>
                {
                    b.HasOne("TypiconOnline.Domain.Typicon.CommonRule", "Entity")
                        .WithMany("VariableLinks")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TypiconOnline.Domain.Typicon.Variable.TypiconVariable", "Variable")
                        .WithMany("CommonRuleLinks")
                        .HasForeignKey("VariableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.Variable.VariableRuleLink<TypiconOnline.Domain.Typicon.ExplicitAddRule>", b =>
                {
                    b.HasOne("TypiconOnline.Domain.Typicon.ExplicitAddRule", "Entity")
                        .WithMany("VariableLinks")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TypiconOnline.Domain.Typicon.Variable.TypiconVariable", "Variable")
                        .WithMany("ExplicitAddRuleLinks")
                        .HasForeignKey("VariableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TypiconOnline.Domain.Days.MenologyDay", b =>
                {
                    b.OwnsOne("TypiconOnline.Domain.ItemTypes.ItemDate", "Date", b1 =>
                        {
                            b1.Property<int>("MenologyDayId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Day")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Month")
                                .HasColumnType("INTEGER");

                            b1.HasKey("MenologyDayId");

                            b1.ToTable("Day");

                            b1.WithOwner()
                                .HasForeignKey("MenologyDayId");
                        });

                    b.OwnsOne("TypiconOnline.Domain.ItemTypes.ItemDate", "LeapDate", b1 =>
                        {
                            b1.Property<int>("MenologyDayId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Day")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Month")
                                .HasColumnType("INTEGER");

                            b1.HasKey("MenologyDayId");

                            b1.ToTable("Day");

                            b1.WithOwner()
                                .HasForeignKey("MenologyDayId");
                        });
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.MenologyRule", b =>
                {
                    b.HasOne("TypiconOnline.Domain.Typicon.TypiconVersion", "TypiconVersion")
                        .WithMany("MenologyRules")
                        .HasForeignKey("TypiconVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("TypiconOnline.Domain.ItemTypes.ItemDate", "Date", b1 =>
                        {
                            b1.Property<int>("MenologyRuleId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Day")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Month")
                                .HasColumnType("INTEGER");

                            b1.HasKey("MenologyRuleId");

                            b1.ToTable("DayRule");

                            b1.WithOwner()
                                .HasForeignKey("MenologyRuleId");
                        });

                    b.OwnsOne("TypiconOnline.Domain.ItemTypes.ItemDate", "LeapDate", b1 =>
                        {
                            b1.Property<int>("MenologyRuleId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Day")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Month")
                                .HasColumnType("INTEGER");

                            b1.HasKey("MenologyRuleId");

                            b1.ToTable("DayRule");

                            b1.WithOwner()
                                .HasForeignKey("MenologyRuleId");
                        });
                });

            modelBuilder.Entity("TypiconOnline.Domain.Typicon.TriodionRule", b =>
                {
                    b.HasOne("TypiconOnline.Domain.Typicon.TypiconVersion", "TypiconVersion")
                        .WithMany("TriodionRules")
                        .HasForeignKey("TypiconVersionId")
                        .HasConstraintName("FK_DayRule_TypiconVersion_TypiconVersionId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
