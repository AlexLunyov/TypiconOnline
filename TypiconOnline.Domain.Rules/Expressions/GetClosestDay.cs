//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using System.Globalization;
using TypiconOnline.Infrastructure.Common.Domain;
using TypiconOnline.Domain.ItemTypes;
using TypiconOnline.Domain.Typicon;
using TypiconOnline.Domain.Rules.Handlers;
using TypiconOnline.Domain.Interfaces;
using TypiconOnline.Domain.Rules.Interfaces;

namespace TypiconOnline.Domain.Rules.Expressions
{
    //
    // EXAMPLE
    //
    // <getclosestday dayofweek="суббота" weekcount="-2"><date>--11-08</date></getclosestday>
    //

    public class GetClosestDay : DateExpression
    {
        public GetClosestDay(string name) : base(name) { }

        public virtual DayOfWeek? DayOfWeek { get; set; }

        public virtual int WeekCount { get; set; }

        public DateExpression ChildDateExp { get; set; }

        protected override void InnerInterpret(IRuleHandler handler)
        {
            ChildDateExp.Interpret(handler);

            if (WeekCount != 0)
            {
                int i = (WeekCount > 0) ? 1 : -1;

                ValueCalculated = ChildDateExp.ValueCalculated;
                while (ValueCalculated.DayOfWeek != DayOfWeek)
                {
                    ValueCalculated = ValueCalculated.AddDays(i);
                }

                if (ValueCalculated != ChildDateExp.ValueCalculated)
                {
                    i = (WeekCount > 0) ? (WeekCount - 1) : (WeekCount + 1);
                }
                else
                {
                    i = WeekCount;
                }

                if (i != 0)
                {
                    ValueCalculated = ValueCalculated.AddDays(i * 7);
                }
            }
            else
            {
                //находим принципально ближайший день
                int forward = 0;
                int backward = 0;

                DateTime exp = ChildDateExp.ValueCalculated;

                while (exp.DayOfWeek != DayOfWeek)
                {
                    exp = exp.AddDays(1);
                    forward++;
                }

                exp = ChildDateExp.ValueCalculated;

                while (exp.DayOfWeek != DayOfWeek)
                {
                    exp = exp.AddDays(-1);
                    backward++;
                }

                ValueCalculated = (forward < backward) ? ChildDateExp.ValueCalculated.AddDays(forward) :
                                                            ChildDateExp.ValueCalculated.AddDays(backward * -1);
            }
        }

        protected override void Validate()
        {
            if (DayOfWeek == null)
            {
                AddBrokenConstraint(GetClosestDayBusinessConstraint.DayOfWeekRequired, ElementName);
            }
            //else
            //{
            //    if (!DayOfWeek.IsValid)
            //    {
            //        AddBrokenConstraint(GetClosestDayBusinessConstraint.DayOfWeekWrongDefinition, ElementName);
            //    }
            //}

            if (ChildDateExp == null)
            {
                AddBrokenConstraint(GetClosestDayBusinessConstraint.DateRequired, ElementName);
            }
            else
            {
                //добавляем ломаные правила к родителю
                if (!ChildDateExp.IsValid)
                {
                    foreach (BusinessConstraint brokenRule in ChildDateExp.GetBrokenConstraints())
                    {
                        AddBrokenConstraint(brokenRule, ElementName + "." + brokenRule.ConstraintPath);
                    }
                }
            }
        }
    }
}

