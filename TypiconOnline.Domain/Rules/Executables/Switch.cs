//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using TypiconOnline.Domain.Interfaces;
using TypiconOnline.Domain.ItemTypes;
using TypiconOnline.Domain.Rules.Expressions;
using TypiconOnline.Domain.Rules.Handlers;
using TypiconOnline.Domain.Typicon;
using TypiconOnline.Infrastructure.Common.Domain;

namespace TypiconOnline.Domain.Rules.Executables
{
    public class Switch : RuleExecutable
    {
        //public RuleElement ParentElement { get; set; }

        public Switch(string name) : base(name) { }

        #region Properties

        public RuleExpression Expression { get; set; }

        public ICollection<Case> CaseElements { get; set; } = new List<Case>();

        public ExecContainer Default { get; set; }

        #endregion

        #region Methods

        protected override void InnerInterpret(IRuleHandler settings)
        {
            Expression.Interpret(settings);

            foreach (Case caseElement in CaseElements)
            {
                caseElement.Interpret(settings);

                foreach (RuleExpression caseValue in caseElement.ValuesElements)
                {
                    caseValue.Interpret(settings);

                    if (Expression.ValueCalculated.Equals(caseValue.ValueCalculated))
                    {
                        //и значения совпадают
                        caseElement.ActionElement.Interpret(settings);
                        return;
                    }
                }
            }

            //если мы здесь, значит совпадений не было
            Default?.Interpret(settings);
        }

        protected override void Validate()
        {
            if (Expression == null)
            {
                AddBrokenConstraint(SwitchBusinessBusinessConstraint.ConditionRequired, ElementName);
            }
            else
            {
                //добавляем ломаные правила к родителю
                if (!Expression.IsValid)
                {
                    AppendAllBrokenConstraints(Expression, ElementName);
                }
            }

            //добавляем ломаные правила к родителю
            foreach (Case caseElement in CaseElements)
            {
                if (!caseElement.IsValid)
                {
                    AppendAllBrokenConstraints(caseElement, $"{ElementName}.{RuleConstants.CaseNodeName}");
                }

                if (Expression?.ExpressionType != caseElement.ExpressionType)
                {
                    AddBrokenConstraint(SwitchBusinessBusinessConstraint.ConditionsTypeMismatch, ElementName);
                }
            }

            //добавляем ломаные правила к родителю
            if (Default?.IsValid == false)
            {
                AppendAllBrokenConstraints(Default, $"{ElementName}.{RuleConstants.DefaultNodeName}");
            }
        }

        #endregion
    }
}

