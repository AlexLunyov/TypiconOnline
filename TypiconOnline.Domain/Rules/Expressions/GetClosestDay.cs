//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using System.Globalization;
using TypiconOnline.Infrastructure.Common.Domain;
using TypiconOnline.Domain.ItemTypes;
using TypiconOnline.Domain.Typicon;
using TypiconOnline.Domain.Rules.Handlers;
using TypiconOnline.Domain.Interfaces;

namespace TypiconOnline.Domain.Rules.Expressions
{
    //
    // EXAMPLE
    //
    // <getclosestday dayofweek="saturday" weekcount="-2"><date>--11-08</date></getclosestday>
    //

    public class GetClosestDay : DateExpression
    {
        private ItemDayOfWeek _dayOfWeek;
        private ItemInt _weekCount;
        private DateExpression _childDateExp;

        public GetClosestDay(XmlNode valNode) : base(valNode)
        {
            if (valNode.Attributes.Count > 0)
            {
                XmlAttribute attr = valNode.Attributes[RuleConstants.DayOfWeekAttrName];
                if (attr != null)
                {
                    _dayOfWeek = new ItemDayOfWeek(attr.Value);
                }
                
                attr = valNode.Attributes[RuleConstants.WeekCountAttrName];

                if (attr != null)
                {
                    _weekCount = new ItemInt(attr.Value);
                }                
            }

            if (valNode.HasChildNodes)
            {
                _childDateExp = Factories.RuleFactory.CreateDateExpression(valNode.FirstChild);
            }
        }

        public virtual ItemDayOfWeek DayOfWeek
        {
            get
            {
                return _dayOfWeek;
            }
        }

        public virtual ItemInt WeekCount
        {
            get
            {
                return _weekCount;
            }
        }

        protected override void InnerInterpret(DateTime date, IRuleHandler handler)
        {
            _childDateExp.Interpret(date, handler);

            if (WeekCount.Value != 0)
            {
                int i = (WeekCount.Value > 0) ? 1 : -1;

                _valueCalculated = _childDateExp.ValueCalculated;
                while (((DateTime)_valueCalculated).DayOfWeek != DayOfWeek.Value)
                {
                    _valueCalculated = ((DateTime)_valueCalculated).AddDays(i);
                }

                if (_valueCalculated != _childDateExp.ValueCalculated)
                    i = (WeekCount.Value > 0) ? (WeekCount.Value - 1) : (WeekCount.Value + 1);
                else
                    i = WeekCount.Value;

                if (i != 0)
                    _valueCalculated = ((DateTime)_valueCalculated).AddDays(i * 7);
            }
            else
            {
                //находим принципально ближайший день
                int forward = 0;
                int backward = 0;

                DateTime exp = (DateTime)_childDateExp.ValueCalculated;

                while (exp.DayOfWeek != DayOfWeek.Value)
                {
                    exp = exp.AddDays(1);
                    forward++;
                }

                exp = (DateTime)_childDateExp.ValueCalculated;

                while (exp.DayOfWeek != DayOfWeek.Value)
                {
                    exp = exp.AddDays(-1);
                    backward++;
                }

                _valueCalculated = (forward < backward) ? ((DateTime)_childDateExp.ValueCalculated).AddDays(forward) :
                                                            ((DateTime)_childDateExp.ValueCalculated).AddDays(backward * -1);
            }
        }

        protected override void Validate()
        {
            if (_dayOfWeek == null)
            {
                AddBrokenConstraint(GetClosestDayBusinessConstraint.DayOfWeekRequired, ElementName);
            }
            else
            {
                if (!_dayOfWeek.IsValid)
                {
                    AddBrokenConstraint(GetClosestDayBusinessConstraint.DayOfWeekWrongDefinition, ElementName);
                }
            }

            if (_weekCount == null)
            {
                AddBrokenConstraint(GetClosestDayBusinessConstraint.WeekCountRequired, ElementName);
            }
            else
            {
                if (!_weekCount.IsValid)
                {
                    AddBrokenConstraint(GetClosestDayBusinessConstraint.WeekCountWrongDefinition, ElementName);
                }
            }

            if (_childDateExp == null)
            {
                AddBrokenConstraint(GetClosestDayBusinessConstraint.DateRequired, ElementName);
            }
            else
            {
                //добавляем ломаные правила к родителю
                if (!_childDateExp.IsValid)
                {
                    foreach (BusinessConstraint brokenRule in _childDateExp.GetBrokenConstraints())
                    {
                        AddBrokenConstraint(brokenRule, ElementName + "." + brokenRule.ConstraintPath);
                    }
                }
            }
        }
    }
}

