//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using TypiconOnline.Domain.ItemTypes;

namespace TypiconOnline.Domain.Rules.Expressions
{ 
    /*public interface IRuleOutputElement  : RuleElement
    {
	    object OutputValue { get; }

	    IRuleOutputElement InputValue { get;set; }

	    Type OutputType { get; }

	    bool Equals(IRuleOutputElement obj);

    }*/

    public abstract class RuleExpression : RuleElement
    {
        public RuleExpression(XmlNode node) : base(node) { }

        protected object _valueExpression;

        protected object _valueCalculated;

        public virtual object ValueExpression {
            get
            {
                return _valueExpression;
            }
        }

        public virtual object ValueCalculated
        {
            get
            {
                return _valueCalculated;
            }
        }
        public virtual Type ExpressionType { get; }

        public virtual bool ValueExpressionEquals(RuleExpression entity)
        {
            return (entity != null)
               //&& entity is RuleExpression
               && ValueExpression.Equals(entity.ValueExpression);
               //&& this == (RuleExpression<ExpType>)entity;
        }

        //public virtual bool ValueCalculatedEquals(RuleExpression exp)
        //{
        //    return (exp?.ValueCalculatedEquals(this) == true);
        //}

        //public override int GetHashCode()
        //{
        //    return this.ExpressionType.GetHashCode();
        //}

        /// <summary>
        /// Метод сравнивает типы выражений объектов
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public bool ExpressionTypeEquals(RuleExpression obj)
        {
            return (obj != null)
                && ExpressionType.Equals(obj.ExpressionType);
        }

        //public bool OutputValueEquals(RuleExpression obj)
        //{
        //    if (obj == null)
        //        return false;

        //    if (OutputType.Equals(obj.OutputType))
        //    {
        //        return OutputValue.Equals(obj.OutputValue);
        //    }

        //    return false;
        //}
    }
}

