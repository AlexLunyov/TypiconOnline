//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using TypiconOnline.Domain.Days;

namespace TypiconOnline.Domain.Folders
{
    public class DayFolder : BaseFolder<Day>
    {
        public DayFolder() : base()
        {
            Name = "";
            Folders = new List<DayFolder>();
        }

        public DayFolder Parent { get; set; }
        public virtual List<DayFolder> Folders { get; set; }
        public string PathName
        {
            get
            {
                return (Parent != null) ? (Parent.PathName + "/" + Name) : Name;
            }
        }

        protected override void Validate()
        {
            throw new NotImplementedException();
        }

        public Day FindDay(Expression<Func<Day, bool>> predicate)
        {
            if (predicate == null)
                return null;

            Day result = ChildElements.AsQueryable().Where(predicate).FirstOrDefault();

            if (result == null)
            {
                foreach (DayFolder folder in Folders)
                {
                    result = folder.FindDay(predicate);
                    if (result != null)
                    {
                        return result;
                    }
                }
            }

            return result;
        }

        public List<Day> FindAllDays(Predicate<Day> predicate = null)
        {
            List<Day> resultDays = new List<Day>();

            List<Day> days = (predicate == null) ? ChildElements : ChildElements.FindAll(predicate); //AsQueryable().Where(predicate) as List<RuleEntity>;

            if (days != null)
            {
                resultDays.AddRange(days);
            }

            foreach (DayFolder folder in Folders)
            {
                days = (predicate == null) ? folder.ChildElements : folder.FindAllDays(predicate);//Rules.AsQueryable().Where(predicate) as List<RuleEntity>;

                if (days != null)
                {
                    resultDays.AddRange(days);
                }
            }

            return resultDays;
        }
    }
}

