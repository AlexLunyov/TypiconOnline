//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using TypiconOnline.Domain.Typicon;

namespace TypiconOnline.Domain.Folders
{
    public class TypiconFolder : BaseFolder<CommonRule>
    {
        public TypiconFolder() : base()
        {
            Name = "";
            //Folders = new List<TypiconFolder>();
        }

        public virtual TypiconFolder Parent { get; set; }

        public virtual List<TypiconFolder> Folders { get; set; }
        public virtual TypiconEntity Owner { get; set; }
        public string PathName
        {
            get
            {
                return (Parent != null) ? (Parent.PathName + "/" + Name) : Name;
            }
        }

        protected override void Validate()
        {
            throw new NotImplementedException();
        }

        public TypiconEntity GetOwner()
        {
            TypiconEntity result = Owner;
            if ((result == null) && (Parent != null))
            {
                return Parent.GetOwner();
            }

            return result;
        }

        public MenologyRule FindMenologyRule(DateTime date)
        {
            //MenologyRule result = (MenologyRule)Rules.AsQueryable().FirstOrDefault(c => ((c is MenologyRule) &&
            //                                    (((MenologyRule)c).Day.GetCurrentDate(date.Year)) == date));

            MenologyRule result = (MenologyRule)ChildElements.FirstOrDefault(c => ((c is MenologyRule) &&
                                                (((MenologyRule)c).Day.GetCurrentDate(date.Year)) == date));

            if (result == null)
            {
                foreach (TypiconFolder folder in Folders)
                {
                    result = folder.FindMenologyRule(date);
                    if (result != null)
                    {
                        return result;
                    }
                }
            }

            return result;
        }

        public TriodionRule FindTriodionRule(int daysFromEaster)
        {
            TriodionRule result = (TriodionRule)ChildElements.AsQueryable().
                FirstOrDefault(c => ((c is TriodionRule) && ((c as TriodionRule).Day.DaysFromEaster == daysFromEaster)));

            if (result == null)
            {
                foreach (TypiconFolder folder in Folders)
                {
                    result = folder.FindTriodionRule(daysFromEaster);
                    if (result != null)
                    {
                        return result;
                    }
                }
            }

            return result;
        }
    }
}

